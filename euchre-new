// Project UID 1d9f47bfc76643019cfbf037641defe1

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>
#include <vector>
#include "Card.h"
#include "Pack.h"
#include "Player.h"


using namespace std;
class Game {
public:
    Game(vector<Player*> players, Pack cards, string shuffle, int winning_points) {
        euchre_players = players;
        pack = cards;
        shuffle_dec = shuffle;
        points_to_win = winning_points;
    }

    void play() {
        shuffle();
        deal();
        make_trump();
        play_hand();
    }

private:
    vector<Player*> euchre_players;
    string shuffle_dec;
    int points_to_win;
    Pack pack;
    int hands = 0;
    int points_per_player[4] = {0,0,0,0};
    int dealer_index = 0;
    Card upcard;
    Suit trump;

   void shuffle() {
       cout << "Hand " << hands;
       if (shuffle_dec == "noshuffle") {
           pack.reset();
       }
       else {
           pack.shuffle();
       }
    }

   void deal() {
       dealer_index = hands % 4;
       cout << (*euchre_players[dealer_index]).get_name() << " deals" << endl;
       for (int i = 0; i < 3; i++) {
           (*euchre_players[(dealer_index + 1) % 4]).add_card(pack.deal_one());
       }
       for (int i = 0; i < 2; i++) {
           (*euchre_players[(dealer_index + 2) % 4]).add_card(pack.deal_one());
       }
       for (int i = 0; i < 3; i++) {
           (*euchre_players[(dealer_index + 3) % 4]).add_card(pack.deal_one());
       }
       for (int i = 0; i < 2; i++) {
           (*euchre_players[dealer_index]).add_card(pack.deal_one());
       }
       for (int i = 0; i < 2; i++) {
           (*euchre_players[(dealer_index + 1) % 4]).add_card(pack.deal_one());
       }
       for (int i = 0; i < 3; i++) {
           (*euchre_players[(dealer_index + 2) % 4]).add_card(pack.deal_one());
       }
       for (int i = 0; i < 2; i++) {
           (*euchre_players[(dealer_index + 3) % 4]).add_card(pack.deal_one());
       }
       for (int i = 0; i < 3; i++) {
           (*euchre_players[dealer_index]).add_card(pack.deal_one());
       }
       upcard = pack.deal_one();
   }

   void make_trump() {
      
       cout << upcard.get_rank() << " of " << upcard.get_suit() << "turned up" << endl;
       bool make_trump;

       for (int round = 1; round < 3; round++) {
           for (int player_num = 1; player_num < 5; player_num++) {
               bool is_dealer = (((dealer_index + player_num) % 4) == dealer_index);
               make_trump = (*euchre_players[(dealer_index + player_num) % 4]).make_trump(upcard, is_dealer, round, trump);
               if (make_trump == true && round == 1) {
                   (*euchre_players[dealer_index]).add_and_discard(upcard);
                   cout << (*euchre_players[(dealer_index + player_num) % 4]).get_name()
                       << " orders up " << trump << endl;
                   return;
               }
               else if (make_trump == false) {
                   cout << (*euchre_players[(dealer_index + player_num) % 4]).get_name()
                       << "passes" << endl;
               }
               else if (make_trump == true && round == 2) {
                   cout << (*euchre_players[(dealer_index + player_num) % 4]).get_name()
                       << " orders up " << trump << endl;
                   return;
               }
           }
           
       }
   }

   void play_hand() {
   }
};


// EFFECTS: check the errors of the input arguments
bool errors_check(int argc, char** argv) {
    // check if there are exactly 12 arguments
    if (argc != 12) {
        return false;
    }
    // check the shuffle argument
    string shuffl_Argu = argv[2];
    if ((shuffl_Argu != "shuffle") && (shuffl_Argu != "noshuffle")) {
        return false;
    }
    // check points to win the game is between 1 and 100, inclusive
    if ((atoi(argv[3]) > 100) || (atoi(argv[3]) < 1)) {
        return false;
    }
    // check the types of each of the players 
    // are either "Simple" or "Human"
    for (int i = 5; i < 12; i += 2) {
        string player_type = argv[i];
        if ((player_type != "Simple") && (player_type != "Human")) {
            return false;
        }
    }

    return true;
}

int main(int argc, char** argv) {

    // check for errors in the arguments
    if (errors_check(argc, argv) == false) {
        cout << "Usage: euchre.exe PACK_FILENAME [shuffle|noshuffle] "
            << "POINTS_TO_WIN NAME1 TYPE1 NAME2 TYPE2 NAME3 TYPE3 "
            << "NAME4 TYPE4" << endl;
        return 1;
    }
    // check if the pack input file opens successfully
    ifstream fin;
    string pack_in = argv[1];
    fin.open(pack_in);
    if (!fin.is_open()) {
        cout << "Error opening " << pack_in << endl;
        return 1;
    }

    // print the arugments
    for (int i = 0; i < argc; i++) {
        cout << argv[i] << " ";
    }
    cout << endl;

    // get shuffle decision
    string shuffle = argv[2];
    // get points for winning
    int winning_point = atoi(argv[3]);
    // get card pack
    Pack pack(fin);
    // get game players
    vector<Player*> players;
    for (int i = 4; i < 12; i += 2) {
        players.push_back(Player_factory(string(argv[i]), string(argv[i + 1])));
    }
